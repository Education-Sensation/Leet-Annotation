{"version":3,"sources":["addTagForm.js","tagSelector.js","addNoteForm.js","addReadingTextForm.js","noteDisplayUI.js","App.js","reportWebVitals.js","index.js"],"names":["AddTagForm","props","state","newTag","handleCancel","bind","handleInputChange","handleSubmit","console","log","this","submitForm","event","setState","target","value","hideForm","className","htmlFor","id","name","type","onChange","Button","variant","onClick","React","Component","TagSelector","onSelect","selectedTagValues","selectElement","option","result","options","i","iLen","length","selected","push","text","getSelectValues","onTagSelect","tagList","Array","forEach","tagObject","DropdownButton","title","multiple","AddNoteForm","tagFormIsHidden","formData","note","keyphrase","tags","handleTagFormDisplay","handleNoteChange","handlekeyphraseChange","handleTagsChange","submitNewNote","shouldHide","alert","tagForm","submitNewTag","placeholder","cols","rows","addReadingTextForm","handleAddClick","handleTextChange","newParagraphs","submitNewReadingText","NoteDisplayUI","handleDisplayClick","onDisplayClick","infiniteTagIdGenerator","int","toString","App","setReadingText","appendNote","handleNewTagData","tagIdGenerator","defaultTags","defaultTagObjectArray","notes","next","readingText","newText","tagText","tagId","newTagArray","concat","newNoteData","newNote","noteObject","readingTextInsertIndex","tag","breakpoint1","breakpoint2","section1","children","slice","section2","section3","selectedTags","charPointers","fill","matches","readingCharIndex","readingChar","noteIndex","checkCharPointer","applyFormattedNote","paragraphs","Navbar","collapseOnSelect","expand","bg","Brand","href","Toggle","aria-controls","Collapse","Nav","Jumbotron","Accordion","Card","Header","as","eventKey","Body","userTags","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.defb7c07.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport default class AddTagForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { newTag: \"\" };\r\n\r\n    this.handleCancel = this.handleCancel.bind(this);\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit() {\r\n    console.log(\"submitting this tag data: \", this.state.newTag);\r\n    this.props.submitForm(this.state.newTag);\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    this.setState({ newTag: event.target.value });\r\n    console.log('updating new tag text to ', event.target.value);\r\n  }\r\n\r\n  handleCancel() {\r\n    this.props.hideForm(true);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"newTag\">\r\n        <h4>New Tag</h4>\r\n        <form>\r\n          <label htmlFor=\"new-tag\"></label>\r\n          <input\r\n            className=\"tag-input\"\r\n            id=\"new-tag\"\r\n            name=\"new-tag\"\r\n            type=\"text\"\r\n            onChange={this.handleInputChange}\r\n          ></input>\r\n\r\n          <Button\r\n            className=\"enterTag\"\r\n            variant=\"outline-success\"\r\n            type=\"button\"\r\n            onClick={this.handleSubmit}\r\n          >\r\n            Add\r\n          </Button>\r\n          {/* updates <App /> state with the input's value */}\r\n          <Button\r\n            className=\"cancelTag\"\r\n            variant=\"danger\"\r\n            onClick={this.handleCancel}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </form>\r\n        {/* hides form */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\n\r\n\r\n// Return an array of the selected opion values\r\n// select is an HTML select element\r\nfunction getSelectValues(selectElement) {\r\n    var result = [];\r\n    var options = selectElement && selectElement.options;\r\n    var option;\r\n  \r\n    for (var i = 0, iLen = options.length; i < iLen; i++) {\r\n      option = options[i];\r\n  \r\n      if (option.selected) {\r\n        result.push(option.value || option.text);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  \r\nexport default class TagSelector extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onSelect = this.onSelect.bind(this);\r\n    }\r\n\r\n    onSelect(event) {\r\n        const selectedTagValues = getSelectValues(event.target);\r\n\r\n        console.log('selected ', selectedTagValues, '. Adding them to parent form state');\r\n        this.props.onTagSelect(selectedTagValues);\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.tagList); // array of 4 empty objects followed by the correct 4 objects\r\n\r\n        let options = new Array(this.props.tagList.length);\r\n        \r\n        // populate array of option tags\r\n        this.props.tagList.forEach((tagObject) => {\r\n            console.log('making <option> for ', tagObject.text, ' with id ', tagObject.id);\r\n            options.push(<option key={tagObject.id}>{tagObject.text}</option>);\r\n        });\r\n    \r\n        return (\r\n          <DropdownButton\r\n            id=\"dropdown-item-button\"\r\n            title=\"Select one or multiple tags\"\r\n          >\r\n            <select\r\n              className=\"droptags\"\r\n              multiple={true}\r\n              name=\"tags-field\"\r\n              id=\"tags-field\"\r\n              onChange={this.onSelect}\r\n            >\r\n              {options}\r\n            </select>\r\n          </DropdownButton>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport AddTagForm from \"./addTagForm\";\r\nimport TagSelector from \"./tagSelector\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\n\r\nexport default class AddNoteForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tagFormIsHidden: true,\r\n      formData: {\r\n        note: \"\",\r\n        keyphrase: \"\",\r\n        tags: [],\r\n      },\r\n    };\r\n\r\n    this.handleTagFormDisplay = this.handleTagFormDisplay.bind(this);\r\n    this.handleNoteChange = this.handleNoteChange.bind(this);\r\n    this.handlekeyphraseChange = this.handlekeyphraseChange.bind(this);\r\n    this.handleTagsChange = this.handleTagsChange.bind(this);\r\n    this.submitNewNote = this.submitNewNote.bind(this);\r\n  }\r\n\r\n  handleTagFormDisplay(shouldHide) {\r\n    // if bool shouldHide is true, hides form; else, shows form\r\n    this.setState({ tagFormIsHidden: shouldHide });\r\n  }\r\n\r\n  handleNoteChange(event) {\r\n    this.setState({\r\n      formData: { ...this.state.formData, note: event.target.value },\r\n    });\r\n  }\r\n\r\n  handlekeyphraseChange(event) {\r\n    this.setState({\r\n      formData: { ...this.state.formData, keyphrase: event.target.value },\r\n    });\r\n  }\r\n\r\n  handleTagsChange(selectedTagValues) {\r\n    this.setState((state, props) => {\r\n      console.log(\r\n        \"replacing \",\r\n        state.formData.tags,\r\n        \" with \",\r\n        selectedTagValues\r\n      );\r\n      return { formData: { ...state.formData, tags: selectedTagValues } };\r\n    });\r\n  }\r\n\r\n  submitNewNote() {\r\n    console.log(\"submitting this formData to App... \", this.state.formData);\r\n    this.props.submitNewNote(this.state.formData);\r\n    // TODO: is there an easy way to clear fields here?\r\n    alert(\"Note Added!\");\r\n  }\r\n\r\n  render() {\r\n    // decide whether to show the <AddTagForm /> or just an empty div\r\n    const emptySpan = <span></span>;\r\n    let tagForm = emptySpan;\r\n\r\n    if (!this.state.tagFormIsHidden) {\r\n      tagForm = (\r\n        <AddTagForm\r\n          hideForm={this.handleTagFormDisplay}\r\n          submitForm={this.props.submitNewTag}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h4>Add a New Note</h4>\r\n        <form>\r\n          <label htmlFor=\"note-field\"></label>\r\n\r\n          <textarea\r\n            className=\"newnote\"\r\n            name=\"note-field\"\r\n            id=\"note-field\"\r\n            placeholder=\"have any thoughts to write?\"\r\n            cols=\"30\"\r\n            rows=\"5\"\r\n            onChange={this.handleNoteChange}\r\n          ></textarea>\r\n\r\n          <br />\r\n          {/* add this note to the App component’s dictionary */}\r\n          <Button\r\n            variant=\"outline-success\"\r\n            onClick={this.submitNewNote}\r\n            type=\"button\"\r\n            className=\"enterNewNote\"\r\n          >\r\n            Enter\r\n          </Button>\r\n\r\n          <hr />\r\n\r\n          <label htmlFor=\"keyphrase-field\">\r\n            <strong>Key Phrase:</strong>{\" \"}\r\n          </label>\r\n          <input\r\n            className=\"keyphrase\"\r\n            name=\"keyphrase-field\"\r\n            id=\"keyphrase-field\"\r\n            type=\"text\"\r\n            onChange={this.handlekeyphraseChange}\r\n          ></input>\r\n\r\n          {/* TODO: change this to use props */}\r\n          {/* <label htmlFor=\"tags-field\">\r\n            <strong>Tags: </strong>\r\n          </label> */}\r\n\r\n          {/* testing before deleting the placeholder tags above */}\r\n\r\n          <TagSelector\r\n            tagList={this.props.tagList}\r\n            onTagSelect={this.handleTagsChange}\r\n          />\r\n\r\n          {/* shows <AddTagForm /> */}\r\n          <Button\r\n            className=\"createNewTag\"\r\n            variant=\"outline-secondary\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              this.handleTagFormDisplay(false);\r\n            }}\r\n          >\r\n            Create a new tag &#12297;\r\n          </Button>\r\n\r\n          {/* add this note to the App component’s dictionary */}\r\n          {/* <Button\r\n            variant=\"outline-success\"\r\n            onClick={this.submitNewNote}\r\n            type=\"button\"\r\n          >\r\n            Enter\r\n          </Button> */}\r\n        </form>\r\n        {tagForm}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport default class addReadingTextForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleAddClick = this.handleAddClick.bind(this);\r\n    this.handleTextChange = this.handleTextChange.bind(this);\r\n    this.state = { newParagraphs: [] }; // tracks textarea input\r\n  }\r\n\r\n  handleAddClick() {\r\n    console.log(\r\n      \"submitting this (hopefully new) reading text to App: \",\r\n      this.state.newParagraphs\r\n    );\r\n    if (this.state.newParagraphs != \"\") {\r\n      this.props.submitNewReadingText(this.state.newParagraphs); // pass textarea value (as recorded in state)\r\n    }\r\n  }\r\n\r\n  handleTextChange(event) {\r\n    console.log(\r\n      \"changing state in handleTextChange() from \",\r\n      this.state.newParagraphs,\r\n      \" to \",\r\n      event.target.value\r\n    );\r\n    this.setState({ newParagraphs: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"newReadingStyle\">\r\n        <h3>Enter new text to be annotated:</h3>\r\n        <form>\r\n          <textarea\r\n            name=\"newReadingText\"\r\n            cols=\"100\"\r\n            rows=\"10\"\r\n            onChange={this.handleTextChange}\r\n          ></textarea>\r\n          {/* replaces text in ReadingText component */}\r\n          <br />\r\n          <Button\r\n            variant=\"success\"\r\n            onClick={this.handleAddClick}\r\n            className=\"newTextButton\"\r\n            type=\"button\"\r\n          >\r\n            Add!\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport TagSelector from \"./tagSelector\";\r\n\r\nclass NoteDisplayUI extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { tags: [] };\r\n\r\n    this.handleTagsChange = this.handleTagsChange.bind(this);\r\n    this.handleDisplayClick = this.handleDisplayClick.bind(this);\r\n  }\r\n\r\n  handleTagsChange(selectedTagValues) {\r\n    this.setState((state, props) => {\r\n      console.log(\"replacing \", state.tags, \" with \", selectedTagValues);\r\n      return { tags: selectedTagValues };\r\n    });\r\n  }\r\n\r\n  handleDisplayClick() {\r\n    console.log(\"displaying notes for tags \", this.state.tags);\r\n    this.props.onDisplayClick(this.state.tags);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"noteDisplay\">\r\n        <h4>Select a keyword and see the Notes associated.</h4>\r\n        <form>\r\n          {/* add onClick function that will replace text component */}\r\n          {/* <Dropdown as={ButtonGroup} className=\"dropdown\">\r\n            <Button onClick={this.handleDisplayClick} variant=\"info\">Show/Hide Notes</Button>\r\n  \r\n            <Dropdown.Toggle split variant=\"info\" id=\"dropdown-split-basic\" />\r\n  \r\n            <Dropdown.Menu>\r\n              <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\r\n              <Dropdown.Item href=\"#/action-2\">Another keyword</Dropdown.Item>\r\n              <Dropdown.Item href=\"#/action-3\">Another keyword</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown> */}\r\n\r\n          {/* TODO: please put this into the Dropdown show/hide area in place of the current Dropdown.Menu */}\r\n          <Button onClick={this.handleDisplayClick} variant=\"info\">Show/Hide Notes</Button>\r\n          <TagSelector\r\n            tagList={this.props.tagList}\r\n            onTagSelect={this.handleTagsChange}\r\n          />\r\n        </form>\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NoteDisplayUI;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport AddNoteForm from \"./addNoteForm\";\r\nimport AddReadingTextForm from \"./addReadingTextForm\";\r\nimport NoteDisplayUI from \"./noteDisplayUI\";\r\n// Bootstrap modules\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\n\r\nfunction* infiniteTagIdGenerator() {\r\n  let int = 0;\r\n  while (true) {\r\n    yield \"t\" + (++int).toString();\r\n  }\r\n}\r\n\r\nasync function getText() {\r\n  // returns an array of strings containing meaty lorem ipsum\r\n  const response = await fetch(\r\n    \"https://baconipsum.com/api/?type=all-meat&paras=3&start-with-lorem=1\"\r\n  );\r\n  const data = await response.json(); // TODO 1: needs to return an array of strings. See below TODO\r\n  return data;\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    // this.state = {readingText: this.getText()};  // TODO 1: readingText is an array of strings each representing paragraphs (currently just a string)\r\n    this.setReadingText = this.setReadingText.bind(this);\r\n    this.appendNote = this.appendNote.bind(this);\r\n    this.handleNewTagData = this.handleNewTagData.bind(this);\r\n    this.handleDisplayClick = this.handleDisplayClick.bind(this);\r\n\r\n    // generator for unique IDs (tag IDs distinct from other kinds of IDs because of leading 't')\r\n    this.tagIdGenerator = infiniteTagIdGenerator();\r\n\r\n    // provide some tags by default\r\n    this.defaultTags = [\"highlight\", \"footnote\", \"inline note\", \"hover note\"];\r\n    let defaultTagObjectArray = new Array(this.defaultTags.length);\r\n    for (const tagText of this.defaultTags) {\r\n      let newTag = {\r\n        text: tagText,\r\n        notes: [],\r\n        id: this.tagIdGenerator.next().value,\r\n      };\r\n\r\n      defaultTagObjectArray.push(newTag);\r\n    }\r\n\r\n    this.state = {\r\n      readingText:\r\n        <p>initial text - Kevin, wait a bit for your blessed paragraphs. It was easier as a plain string</p>,\r\n      notes: [],\r\n      tags: defaultTagObjectArray,\r\n    };\r\n\r\n    console.log(\"default tags working? \", this.state.tags);\r\n  }\r\n\r\n  setReadingText(newText) {\r\n    this.setState({ readingText: <p>{ newText }</p> });\r\n  }\r\n\r\n  handleNewTagData(tagText) {\r\n    // append a Tag object to state array for each tag in newTagList. If it's not a new tag, return null\r\n    // it's possible to add a new tag with no note\r\n    console.log(\"***handleNewTagData called\");\r\n\r\n    const tagId = this.tagIdGenerator.next().value;\r\n\r\n    console.log(\"    this new tag has ID \", tagId);\r\n    console.log(\"    this new tag has text \", tagText);\r\n\r\n    this.setState((state, props) => {\r\n      // make a new Tag object\r\n      const newTag = {\r\n        text: tagText,\r\n        notes: [],\r\n        id: tagId,\r\n      };\r\n\r\n      // append the new Tag object to state array\r\n      console.log(\"adding tag \", tagText, \"with id\", tagId, \" to app state\");\r\n      const newTagArray = state.tags.concat([newTag]);\r\n      console.log(\"   ...so the updated tag array is \", newTagArray);\r\n      return { tags: newTagArray };\r\n    });\r\n  }\r\n\r\n  appendNote(newNoteData) {\r\n    //TODO: should be called \"handle\" new note data and call appendNote and linkNoteToTag\r\n    // make a new Note object with formData fields as attributes\r\n    const newNote = {\r\n      text: newNoteData.note,\r\n      keyphrase: newNoteData.keyphrase,\r\n      tags: newNoteData.tags,\r\n    };\r\n\r\n    console.log(\"adding note \", newNote, \" to \", this.state.notes);\r\n\r\n    // append Note object to state array (uses arrow function version of setState() to access previous state)\r\n    this.setState((state, props) => {\r\n      const newNoteArray = state.notes.concat([newNote]);\r\n      return { notes: newNoteArray };\r\n    });\r\n  }\r\n\r\n  applyFormattedNote(noteObject, readingTextInsertIndex) {\r\n    // check which formatting tags are associated with the note\r\n    for (const tag of noteObject.tags) {\r\n      if (tag === 'highlight') {\r\n        console.log('applying highlight at index ', readingTextInsertIndex);\r\n        this.setState((state) => {\r\n\r\n          // break reading text into 3 sections, on indices readingTextInsertIndex - noteObject.keyphrase.length and readingTextInsertIndex.\r\n          const breakpoint1 = readingTextInsertIndex - (noteObject.keyphrase.length - 1);  // -1 to convert .length to zero-based\r\n          const breakpoint2 = readingTextInsertIndex + 1;  // +1 to convert slice to inclusive\r\n\r\n          const section1 = state.readingText.props.children.slice(0, breakpoint1);\r\n          const section2 = state.readingText.props.children.slice(breakpoint1, breakpoint2);\r\n          const section3 = state.readingText.props.children.slice(breakpoint2);\r\n\r\n          console.log('section 1: ', section1);\r\n          console.log('section 2: ', section2);\r\n          console.log('section 3: ', section3);\r\n\r\n          // Sections 1 and 3 are placed into plain spans, section 2 is placed into a mark tag\r\n          const newReadingText = (\r\n            <p>\r\n              <span>{ section1 }</span>\r\n              <mark>{ section2 }</mark>\r\n              <span>{ section3 }</span>\r\n            </p>\r\n          );\r\n\r\n          return {readingText: newReadingText};\r\n        });\r\n      }\r\n\r\n      if (tag === 'inline') {\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  handleDisplayClick(selectedTags) {\r\n    // TDOO: add \"case sensitive\" button\r\n    // TODO: short-circuit if no notes for the selected tags\r\n\r\n    console.log('handleDisplayClick called! Checking readingText for any keyphrases associated with tags ', selectedTags, '...');\r\n    // if this.state.readingText contains any of the user's note's keyphrases, check formatting associated with that note's tag and apply it\r\n\r\n    const readingText = this.state.readingText.props.children;  // for convenience\r\n    // keep a list of pointers to track the index of each char of each note's keyphrase (for now, notes only have one keyphrase each)\r\n    let charPointers = new Array(this.state.notes.length).fill(0);\r\n    let matches = 0;\r\n\r\n    // for each paragraph, (TODO: currently a string)\r\n    // check each char of the paragraph\r\n    for (let readingCharIndex = 0; readingCharIndex < readingText.length; readingCharIndex++) {  // readingCharIndex used to insert formatting at correct place\r\n      const readingChar = readingText[readingCharIndex];\r\n      console.log('checking ', readingChar);\r\n\r\n      // check all the notes\r\n      for (let noteIndex = 0; noteIndex < this.state.notes.length; noteIndex++) {\r\n        const note = this.state.notes[noteIndex];\r\n        const keyphrase = note.keyphrase;\r\n        const checkCharPointer = charPointers[noteIndex];\r\n\r\n        // if the readingText char is the same as the index char of any user keyphrases\r\n        if (keyphrase[checkCharPointer] === readingChar) {\r\n          // check if it's the last char of the keyphrase (then apply formatting), else advance the char index pointer for those keyphrases\r\n          if (checkCharPointer === keyphrase.length - 1) {  // string.length is 1-indexed while checkCharPointer is 0-indexed\r\n            // use readingCharIndex to insert formatting in right place\r\n            console.log('readingText contains keyphrase ', keyphrase, ' at index ', readingCharIndex, ' apply formatting here');\r\n            this.applyFormattedNote(note, readingCharIndex);\r\n\r\n            matches++;\r\n          } else {\r\n            charPointers[noteIndex]++;\r\n          }\r\n        } else {\r\n          // reset pointer\r\n          charPointers[noteIndex] = 0;\r\n        }\r\n      }\r\n    }\r\n    // report number of keyphrases found in readingText\r\n    if (matches > 0) {\r\n      const notice = 'found ' + matches + ' keyphrases in your reading text and made the annotations specified by their tags';\r\n      alert(notice);\r\n    } else {\r\n      alert('none of your keyphrases appear in this text');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const paragraphs = <p>{this.state.readingText}</p>; // TODO 1: once this.state.readingText is an array of strings, uncomment the below code to replace this temp line\r\n    // const paragraphs = this.state.readingText.map((item, index) => {\r\n    //   return <p key={index}>{item}</p>;\r\n    // });\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"inner\">\r\n          {/* -- NavBar component -- */}\r\n          <Navbar\r\n            className=\"navbar1\"\r\n            collapseOnSelect\r\n            expand=\"lg\"\r\n            bg=\"light\"\r\n            variant=\"light\"\r\n          >\r\n            <Navbar.Brand href=\"#home\">Leet Annotation</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n              <Nav className=\"mr-auto\"></Nav>\r\n              <Nav className=\"navitem\">Team Education Sensation</Nav>\r\n            </Navbar.Collapse>\r\n          </Navbar>\r\n\r\n          {/* -- Jumbotron - Header Code --  */}\r\n          <Jumbotron className=\"jumbo\">\r\n            <h1>Welcome to Leet Annotation!</h1>\r\n            <h5 className=\"jumbo-text\">\r\n              A new interactive annotating web app for students of all ages.\r\n              <br />\r\n              Ever have to painstakingly annotate an article, textbook, or\r\n              novel? Well this is the tool for you! Annotate and create\r\n              user-specific notes which can be viewed inline or as a popup.\r\n              <br />\r\n            </h5>\r\n          </Jumbotron>\r\n\r\n          <div className=\"subcontainer\">\r\n            {/* -- Text Container -- */}\r\n            <div className=\"readingText\">{paragraphs}</div>\r\n\r\n            <AddReadingTextForm submitNewReadingText={this.setReadingText} />\r\n          </div>\r\n          {/* -- Footer, show New Note, Show and Hide Notes, etc. -- */}\r\n          <div className=\"fixed-bottom position-sticky\">\r\n            <Accordion className=\"accordian-contents\">\r\n              <Card className=\"card\">\r\n                <Card.Header>\r\n                  <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                    <Button variant=\"dark\">\r\n                      Click me to Show/Hide Notes for a tag or add a New Note!\r\n                    </Button>\r\n                  </Accordion.Toggle>\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                  <Card.Body>\r\n                    <NoteDisplayUI tagList={this.state.tags} onDisplayClick={this.handleDisplayClick} />\r\n                    <AddNoteForm\r\n                      userTags={this.state.tags}  // TODO: remove this?\r\n                      tagList={this.state.tags}\r\n                      submitNewNote={this.appendNote}\r\n                      submitNewTag={this.handleNewTagData}\r\n                    />\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}