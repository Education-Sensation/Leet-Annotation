{"version":3,"sources":["logo.svg","addTagForm.js","addNoteForm.js","addReadingTextForm.js","App.js","reportWebVitals.js","index.js"],"names":["AddTagForm","props","handleClick","bind","this","hideForm","htmlFor","id","name","type","onClick","React","Component","AddNoteForm","state","tagFormIsHidden","handleTagFormDisplay","shouldHide","setState","tagForm","placeholder","AddReadingTextForm","className","cols","rows","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAAe,I,wCCEMA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFJ,E,0DAMfC,KAAKH,MAAMI,UAAS,K,+BAIpB,OACI,gCACI,yCACA,iCACI,uBAAOC,QAAQ,YACf,uBAAOC,GAAG,UAAUC,KAAK,UAAUC,KAAK,SAExC,wBAAQA,KAAK,SAAb,mBAJJ,QAMI,wBAAQA,KAAK,SAASC,QAASN,KAAKF,YAApC,oBARR,Y,GAZ4BS,IAAMC,WCCzBC,E,kDACjB,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IACDa,MAAQ,CAACC,iBAAiB,GAC/B,EAAKC,qBAAuB,EAAKA,qBAAqBb,KAA1B,gBAHb,E,iEAMEc,GAEjBb,KAAKc,SAAS,CAACH,gBAAiBE,M,+BAG1B,IAAD,OAGDE,EADc,yBAOlB,OAJKf,KAAKU,MAAMC,kBACZI,EAAU,cAAC,EAAD,CAAYd,SAAUD,KAAKY,wBAIrC,gCACI,0CACA,iCACA,uBAAOV,QAAQ,eACf,0BACIE,KAAK,aACLD,GAAG,aACHa,YAAY,gCAGhB,uBAAOd,QAAQ,kBAAf,wBACA,uBAAOE,KAAK,kBAAkBD,GAAG,kBAAkBE,KAAK,SAExD,uBAAOH,QAAQ,aAAf,kBACA,uBAAOE,KAAK,aAAaD,GAAG,aAAaE,KAAK,SAG9C,wBAAQA,KAAK,SAASC,QAAS,WACvB,EAAKM,sBAAqB,IADlC,mCAKA,wBAAQP,KAAK,SAAb,sBAICU,S,GAhDwBR,IAAMC,WCchCS,EAfY,WACzB,OACE,sBAAKC,UAAU,kBAAf,UACE,kDACA,iCACE,0BAAUd,KAAK,iBAAiBe,KAAK,MAAMC,KAAK,OAEhD,wBAAQF,UAAU,gBAAgBb,KAAK,SAAvC,wBCOOgB,MAVf,WACE,OACE,sBAAKH,UAAU,MAAf,UACE,6CACA,cAAC,EAAD,IACA,cAAC,EAAD,QCCSI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1851ade3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\n\r\nexport default class AddTagForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        this.props.hideForm(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>New Tag</h3>\r\n                <form>\r\n                    <label htmlFor=\"new-tag\"></label>\r\n                    <input id=\"new-tag\" name=\"new-tag\" type=\"text\"></input>\r\n        \r\n                    <button type='button'>Enter</button>  {/* updates <App /> state with the input's value */}\r\n                </form>\r\n                    <button type='button' onClick={this.handleClick}>Cancel</button>  {/* hides form */}\r\n            </div>\r\n          );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport AddTagForm from \"./addTagForm\";\r\n\r\nexport default class AddNoteForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {tagFormIsHidden: true};\r\n        this.handleTagFormDisplay = this.handleTagFormDisplay.bind(this);\r\n    }\r\n\r\n    handleTagFormDisplay(shouldHide) {\r\n        // if bool shouldHide is true, hides form; else, shows form        \r\n        this.setState({tagFormIsHidden: shouldHide});\r\n    }\r\n\r\n    render() {\r\n        // decide whether to show the <AddTagForm /> or just an empty div\r\n        const emptySpan = <span></span>;\r\n        let tagForm = emptySpan;\r\n\r\n        if (!this.state.tagFormIsHidden) {\r\n            tagForm = <AddTagForm hideForm={this.handleTagFormDisplay} />;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h3>New Note</h3>\r\n                <form>\r\n                <label htmlFor=\"note-field\"></label>\r\n                <textarea\r\n                    name=\"note-field\"\r\n                    id=\"note-field\"\r\n                    placeholder=\"have any thoughts to write?\"\r\n                ></textarea>\r\n\r\n                <label htmlFor=\"keyphrase-field\">key phrase</label>\r\n                <input name=\"keyphrase-field\" id=\"keyphrase-field\" type=\"text\"></input>\r\n\r\n                <label htmlFor=\"tags-field\">tags</label>\r\n                <input name=\"tags-field\" id=\"tags-field\" type=\"text\"></input>\r\n\r\n                {/* shows <AddTagForm /> */}\r\n                <button type='button' onClick={() => {\r\n                        this.handleTagFormDisplay(false);\r\n                    }}>create new tag &#12297;</button>\r\n\r\n                {/* add this note to the App componentâ€™s dictionary */}\r\n                <button type='button'>Enter</button>\r\n\r\n                </form>\r\n\r\n                {tagForm}\r\n\r\n            </div>\r\n      );\r\n    }\r\n  }","import React from \"react\";\r\n\r\nconst AddReadingTextForm = () => {\r\n  return (\r\n    <div className=\"newReadingStyle\">\r\n      <h1>New Reading Text</h1>\r\n      <form>\r\n        <textarea name=\"newReadingText\" cols=\"100\" rows=\"10\"></textarea>\r\n        {/* add onClick function that will replace text component */}\r\n        <button className=\"newTextButton\" type=\"submit\">\r\n          Add\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddReadingTextForm;\r\n","import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport AddNoteForm from \"./addNoteForm\";\r\nimport AddReadingTextForm from \"./addReadingTextForm\";\r\nimport NoteDisplayUI from \"./noteDisplayUI\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Leet Reader</h1>\r\n      <AddNoteForm />\r\n      <AddReadingTextForm />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}