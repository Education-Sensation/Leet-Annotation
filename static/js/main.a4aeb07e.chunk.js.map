{"version":3,"sources":["addTagForm.js","tagSelector.js","addNoteForm.js","addReadingTextForm.js","noteDisplayUI.js","App.js","reportWebVitals.js","index.js"],"names":["AddTagForm","props","state","newTag","handleCancel","bind","handleInputChange","handleSubmit","console","log","this","submitForm","event","setState","target","value","hideForm","htmlFor","id","name","type","onChange","onClick","React","Component","TagSelector","tagList","options","Array","length","forEach","tagObject","text","push","multiple","AddNoteForm","tagFormIsHidden","formData","note","keyPhrase","tags","handleTagFormDisplay","handleNoteChange","handleKeyPhraseChange","handleTagsChange","submitNewNote","shouldHide","newTagArray","selectElement","option","result","i","iLen","selected","getSelectValues","alert","tagForm","submitNewTag","placeholder","addReadingTextForm","handleAddClick","handleTextChange","newParagraphs","submitNewReadingText","className","cols","rows","NoteDisplayUI","for","infiniteTagIdGenerator","int","toString","App","setReadingText","appendNote","handleNewTagData","tagIdGenerator","defaultTags","defaultTagObjectArray","notes","next","readingText","newText","tagText","tagId","concat","newNoteData","newNote","keyphrase","paragraphs","userTags","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4aeb07e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class AddTagForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {newTag: ''};\r\n\r\n        this.handleCancel = this.handleCancel.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);    \r\n    }\r\n\r\n    handleSubmit() {\r\n        console.log('submitting this tag data: ', this.state.newTag);\r\n        this.props.submitForm(this.state.newTag);\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        this.setState({newTag: event.target.value});\r\n    }\r\n\r\n    handleCancel() {\r\n        this.props.hideForm(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>New Tag</h3>\r\n                <form>\r\n                    <label htmlFor=\"new-tag\"></label>\r\n                    <input id=\"new-tag\" name=\"new-tag\" type=\"text\" onChange={this.handleInputChange}></input>\r\n        \r\n                    <button type='button' onClick={this.handleSubmit}>Add</button>  {/* updates <App /> state with the input's value */}\r\n                </form>\r\n                    <button type='button' onClick={this.handleCancel}>Cancel</button>  {/* hides form */}\r\n            </div>\r\n          );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function TagSelector(props) {\r\n    console.log(props.tagList); // array of 4 empty objects followed by the correct 4 objects\r\n\r\n    let options = new Array(props.tagList.length);\r\n    \r\n    // populate array of option tags\r\n    props.tagList.forEach((tagObject) => {\r\n        console.log('making <option> for ', tagObject.text, ' with id ', tagObject.id);\r\n        options.push(<option key={tagObject.id}>{tagObject.text}</option>);\r\n    });\r\n\r\n    return <select multiple={true}>{options}</select>;\r\n}\r\n","import React from \"react\";\r\nimport AddTagForm from \"./addTagForm\";\r\nimport TagSelector from \"./tagSelector\";\r\n\r\n// Return an array of the selected opion values\r\n// select is an HTML select element\r\nfunction getSelectValues(selectElement) {\r\n    var result = [];\r\n    var options = selectElement && selectElement.options;\r\n    var option;\r\n  \r\n    for (var i=0, iLen=options.length; i<iLen; i++) {\r\n      option = options[i];\r\n  \r\n      if (option.selected) {\r\n        result.push(option.value || option.text);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\nexport default class AddNoteForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tagFormIsHidden: true,\r\n            formData: {\r\n                note: '',\r\n                keyPhrase: '',\r\n                tags: [],\r\n            }\r\n        };\r\n\r\n        this.handleTagFormDisplay = this.handleTagFormDisplay.bind(this);\r\n        this.handleNoteChange = this.handleNoteChange.bind(this);\r\n        this.handleKeyPhraseChange = this.handleKeyPhraseChange.bind(this);\r\n        this.handleTagsChange = this.handleTagsChange.bind(this);\r\n        this.submitNewNote = this.submitNewNote.bind(this);\r\n    }\r\n\r\n    handleTagFormDisplay(shouldHide) {\r\n        // if bool shouldHide is true, hides form; else, shows form        \r\n        this.setState({tagFormIsHidden: shouldHide});\r\n    }\r\n\r\n    handleNoteChange(event) {\r\n        this.setState({formData: {...this.state.formData, note: event.target.value}})\r\n    }\r\n\r\n    handleKeyPhraseChange(event) {\r\n        this.setState({formData: {...this.state.formData, keyPhrase: event.target.value}})\r\n    }\r\n\r\n    handleTagsChange(event) {\r\n        const newTagArray = getSelectValues(event.target);\r\n\r\n        this.setState((state, props) => {\r\n            console.log('replacing ', state.formData.tags, ' with ', newTagArray);\r\n            return {formData: {...state.formData, tags: newTagArray}};\r\n        });\r\n    }\r\n\r\n    submitNewNote() {\r\n        console.log('submitting this formData to App... ', this.state.formData);\r\n        this.props.submitNewNote(this.state.formData);\r\n        // TODO: is there an easy way to clear fields here?\r\n        alert('Note Added!');\r\n    }\r\n\r\n    render() {\r\n        // decide whether to show the <AddTagForm /> or just an empty div\r\n        const emptySpan = <span></span>;\r\n        let tagForm = emptySpan;\r\n\r\n        if (!this.state.tagFormIsHidden) {\r\n            tagForm = <AddTagForm hideForm={this.handleTagFormDisplay} submitForm={this.props.submitNewTag} />;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h3>New Note</h3>\r\n                <form>\r\n                <label htmlFor=\"note-field\"></label>\r\n                <textarea\r\n                    name=\"note-field\"\r\n                    id=\"note-field\"\r\n                    placeholder=\"have any thoughts to write?\"\r\n                    onChange={this.handleNoteChange}\r\n                ></textarea>\r\n\r\n                <label htmlFor=\"keyphrase-field\">key phrase</label>\r\n                <input name=\"keyphrase-field\" id=\"keyphrase-field\" type=\"text\" onChange={this.handleKeyPhraseChange}></input>\r\n\r\n                {/* TODO: change this to use props */}\r\n                <label htmlFor=\"tags-field\">tags</label>\r\n                <select multiple={true} name=\"tags-field\" id=\"tags-field\" onChange={this.handleTagsChange}>\r\n                    <option>tag1</option>\r\n                    <option>tag2</option>\r\n                    <option>tag3</option>\r\n                </select>\r\n\r\n                {/* testing before deleting the placeholder tags above */}\r\n                <TagSelector tagList={this.props.tagList} />\r\n\r\n                {/* shows <AddTagForm /> */}\r\n                <button type='button' onClick={() => {\r\n                        this.handleTagFormDisplay(false);\r\n                    }}>create new tag &#12297;</button>\r\n\r\n                {/* add this note to the App component’s dictionary */}\r\n                <button type='button' onClick={this.submitNewNote}>Enter</button>\r\n\r\n                </form>\r\n\r\n                {tagForm}\r\n\r\n            </div>\r\n      );\r\n    }\r\n  }","import React from \"react\";\r\n\r\nexport default class addReadingTextForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleAddClick = this.handleAddClick.bind(this);\r\n    this.handleTextChange = this.handleTextChange.bind(this);\r\n    this.state = {newParagraphs: []};  // tracks textarea input\r\n  }\r\n\r\n  handleAddClick() {\r\n    console.log('submitting this (hopefully new) reading text to App: ', this.state.newParagraphs);\r\n    this.props.submitNewReadingText(this.state.newParagraphs);  // pass textarea value (as recorded in state)\r\n  };\r\n\r\n  handleTextChange(event) {\r\n    console.log('changing state in handleTextChange() from ', this.state.newParagraphs, ' to ', event.target.value);\r\n    this.setState({newParagraphs: event.target.value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"newReadingStyle\">\r\n        <h1>New Reading Text</h1>\r\n        <form>\r\n          <textarea\r\n            name=\"newReadingText\"\r\n            cols=\"100\"\r\n            rows=\"10\"\r\n            onChange={this.handleTextChange}\r\n            //value={[]}\r\n          ></textarea>\r\n          {/* replaces text in ReadingText component */}\r\n          <button onClick={this.handleAddClick} className=\"newTextButton\" type=\"button\">\r\n            Add\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nconst NoteDisplayUI = () => {\r\n  return (\r\n    <div className=\"noteDisplay\">\r\n      <h1>New Note</h1>\r\n      <form>\r\n        {/* add onClick function that will replace text component */}\r\n        <button className=\"noteDisplayButton\" type=\"submit\">\r\n          show/hide all notes for this tag\r\n        </button>\r\n        <label for=\"keywords\">Select a keyword:</label>\r\n        <select id=\"keys\" name=\"keys\">\r\n          <option value=\"1\">1</option>\r\n          <option value=\"2\">2</option>\r\n          <option value=\"3\">3</option>\r\n          <option value=\"4\">4</option>\r\n        </select>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteDisplayUI;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport AddNoteForm from \"./addNoteForm\";\r\nimport AddReadingTextForm from \"./addReadingTextForm\";\r\nimport NoteDisplayUI from \"./noteDisplayUI\";\r\n\r\nfunction* infiniteTagIdGenerator() {\r\n  let int = 0;\r\n  while (true) {\r\n    yield 't' + (++int).toString();\r\n  }\r\n}\r\n\r\nasync function getText() {\r\n  // returns an array of strings containing meaty lorem ipsum\r\n  const response = await fetch(\r\n    \"https://baconipsum.com/api/?type=all-meat&paras=3&start-with-lorem=1\"\r\n  );\r\n  const data = await response.json();  // TODO 1: needs to return an array of strings. See below TODO\r\n  return data;\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    // this.state = {readingText: this.getText()};  // TODO 1: readingText is an array of strings each representing paragraphs (currently just a string)\r\n\r\n    this.setReadingText = this.setReadingText.bind(this);\r\n    this.appendNote = this.appendNote.bind(this);\r\n    this.handleNewTagData = this.handleNewTagData.bind(this);\r\n\r\n    // generator for unique IDs (tag IDs distinct from other kinds of IDs because of leading 't')\r\n    this.tagIdGenerator = infiniteTagIdGenerator();\r\n\r\n    // provide some tags by default\r\n    const defaultTags = ['highlight', 'footnote', 'inline note', 'hover note'];\r\n    let defaultTagObjectArray = new Array(defaultTags.length);\r\n    for (const tagText of defaultTags) {\r\n      \r\n      let newTag = {\r\n        text: tagText,\r\n        notes: [],\r\n        id: this.tagIdGenerator.next().value\r\n      };\r\n      \r\n      defaultTagObjectArray.push(newTag);\r\n    }\r\n\r\n    this.state = {\r\n      readingText: 'initial text - Kevin, wait a bit for your blessed paragraphs. It was easier as a plain string',\r\n      notes: [],\r\n      tags: defaultTagObjectArray\r\n    };\r\n\r\n    console.log('default tags working? ', this.state.tags);\r\n  }\r\n\r\n  setReadingText(newText) {\r\n    this.setState({readingText: newText});\r\n  }\r\n\r\n  handleNewTagData(tagText) {\r\n    // append a Tag object to state array for each tag in newTagList. If it's not a new tag, return null\r\n    // it's possible to add a new tag with no note\r\n    console.log('***handleNewTagData called');\r\n\r\n    const tagId = this.tagIdGenerator.next().value;\r\n    \r\n    console.log('    this new tag has ID ', tagId);\r\n    console.log('    this new tag has text ', tagText);\r\n\r\n    this.setState((state, props) => {\r\n      // make a new Tag object\r\n      const newTag = {\r\n        text: tagText,\r\n        notes: [],\r\n        id: tagId\r\n      };\r\n\r\n      // append the new Tag object to state array\r\n      console.log('adding tag ', tagText, 'with id', tagId, ' to app state');\r\n      const newTagArray = state.tags.concat([newTag]);\r\n      console.log('   ...so the updated tag array is ', newTagArray);\r\n      return {tags: newTagArray};\r\n    });  \r\n  }\r\n\r\n  appendNote(newNoteData) {  //TODO: should be called \"handle\" new note data and call appendNote and linkNoteToTag\r\n    // make a new Note object with formData fields as attributes\r\n    const newNote = {\r\n      text: newNoteData.note,\r\n      keyphrase: newNoteData.keyPhrase,\r\n      tags: newNoteData.tags\r\n    };\r\n\r\n    console.log('adding note ', newNote, ' to ', this.state.notes);\r\n\r\n    // append Note object to state array (uses arrow function version of setState() to access previous state)\r\n    this.setState((state, props) => {\r\n      const newNoteArray = state.notes.concat([newNote]);\r\n      return {notes: newNoteArray};\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const paragraphs = <p>{this.state.readingText}</p>;  // TODO 1: once this.state.readingText is an array of strings, uncomment the below code to replace this temp line\r\n    // const paragraphs = this.state.readingText.map((item, index) => {\r\n    //   return <p key={index}>{item}</p>;\r\n    // });\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"readingText\">{paragraphs}</div>\r\n        <NoteDisplayUI />\r\n        <AddNoteForm userTags={this.state.tags} tagList={this.state.tags} submitNewNote={this.appendNote} submitNewTag={this.handleNewTagData} />\r\n        <AddReadingTextForm submitNewReadingText={this.setReadingText} />\r\n      </div>\r\n    );  \r\n  }\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}