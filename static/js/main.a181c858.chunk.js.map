{"version":3,"sources":["addTagForm.js","logo.svg","addNoteForm.js","addReadingTextForm.js","noteDisplayUI.js","App.js","reportWebVitals.js","index.js"],"names":["AddTagForm","props","handleClick","bind","this","hideForm","htmlFor","id","name","type","onClick","React","Component","AddNoteForm","state","tagFormIsHidden","handleTagFormDisplay","shouldHide","setState","tagForm","placeholder","addReadingTextForm","handleAddClick","handleTextChange","newParagraphs","console","log","submitNewReadingText","event","target","value","className","cols","rows","onChange","NoteDisplayUI","for","App","getText","a","fetch","response","json","data","setReadingText","readingText","newText","paragraphs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a181c858.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class AddTagForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        this.props.hideForm(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>New Tag</h3>\r\n                <form>\r\n                    <label htmlFor=\"new-tag\"></label>\r\n                    <input id=\"new-tag\" name=\"new-tag\" type=\"text\"></input>\r\n        \r\n                    <button type='button'>Enter</button>  {/* updates <App /> state with the input's value */}\r\n                </form>\r\n                    <button type='button' onClick={this.handleClick}>Cancel</button>  {/* hides form */}\r\n            </div>\r\n          );\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport AddTagForm from \"./addTagForm\";\r\n\r\nexport default class AddNoteForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {tagFormIsHidden: true};\r\n        this.handleTagFormDisplay = this.handleTagFormDisplay.bind(this);\r\n    }\r\n\r\n    handleTagFormDisplay(shouldHide) {\r\n        // if bool shouldHide is true, hides form; else, shows form        \r\n        this.setState({tagFormIsHidden: shouldHide});\r\n    }\r\n\r\n    render() {\r\n        // decide whether to show the <AddTagForm /> or just an empty div\r\n        const emptySpan = <span></span>;\r\n        let tagForm = emptySpan;\r\n\r\n        if (!this.state.tagFormIsHidden) {\r\n            tagForm = <AddTagForm hideForm={this.handleTagFormDisplay} />;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h3>New Note</h3>\r\n                <form>\r\n                <label htmlFor=\"note-field\"></label>\r\n                <textarea\r\n                    name=\"note-field\"\r\n                    id=\"note-field\"\r\n                    placeholder=\"have any thoughts to write?\"\r\n                ></textarea>\r\n\r\n                <label htmlFor=\"keyphrase-field\">key phrase</label>\r\n                <input name=\"keyphrase-field\" id=\"keyphrase-field\" type=\"text\"></input>\r\n\r\n                <label htmlFor=\"tags-field\">tags</label>\r\n                <input name=\"tags-field\" id=\"tags-field\" type=\"text\"></input>\r\n\r\n                {/* shows <AddTagForm /> */}\r\n                <button type='button' onClick={() => {\r\n                        this.handleTagFormDisplay(false);\r\n                    }}>create new tag &#12297;</button>\r\n\r\n                {/* add this note to the App componentâ€™s dictionary */}\r\n                <button type='button'>Enter</button>\r\n\r\n                </form>\r\n\r\n                {tagForm}\r\n\r\n            </div>\r\n      );\r\n    }\r\n  }","import React from \"react\";\r\n\r\nexport default class addReadingTextForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleAddClick = this.handleAddClick.bind(this);\r\n    this.handleTextChange = this.handleTextChange.bind(this);\r\n    this.state = {newParagraphs: []};  // tracks textarea input\r\n  }\r\n\r\n  handleAddClick() {\r\n    console.log('submitting this (hopefully new) reading text to App: ', this.state.newParagraphs);\r\n    this.props.submitNewReadingText(this.state.newParagraphs);  // pass textarea value (as recorded in state)\r\n  };\r\n\r\n  handleTextChange(event) {\r\n    console.log('changing state in handleTextChange() from ', this.state.newParagraphs, ' to ', event.target.value);\r\n    this.setState({newParagraphs: event.target.value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"newReadingStyle\">\r\n        <h1>New Reading Text</h1>\r\n        <form>\r\n          <textarea\r\n            name=\"newReadingText\"\r\n            cols=\"100\"\r\n            rows=\"10\"\r\n            onChange={this.handleTextChange}\r\n            //value={[]}\r\n          ></textarea>\r\n          {/* replaces text in ReadingText component */}\r\n          <button onClick={this.handleAddClick} className=\"newTextButton\" type=\"button\">\r\n            Add\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nconst NoteDisplayUI = () => {\r\n  return (\r\n    <div className=\"noteDisplay\">\r\n      <h1>New Note</h1>\r\n      <form>\r\n        {/* add onClick function that will replace text component */}\r\n        <button className=\"noteDisplayButton\" type=\"submit\">\r\n          show/hide all notes for this tag\r\n        </button>\r\n        <label for=\"keywords\">Select a keyword:</label>\r\n        <select id=\"keys\" name=\"keys\">\r\n          <option value=\"1\">1</option>\r\n          <option value=\"2\">2</option>\r\n          <option value=\"3\">3</option>\r\n          <option value=\"4\">4</option>\r\n        </select>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteDisplayUI;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport AddNoteForm from \"./addNoteForm\";\r\nimport AddReadingTextForm from \"./addReadingTextForm\";\r\nimport NoteDisplayUI from \"./noteDisplayUI\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    // this.state = {readingText: this.getText()};  // TODO 1: readingText is an array of strings each representing paragraphs (currently just a string)\r\n    this.state = {readingText: 'initial text - Kevin, wait a bit for your blessed paragraphs. It was easier as a plain string'};\r\n    this.setReadingText = this.setReadingText.bind(this);\r\n  }\r\n\r\n  setReadingText(newText) {\r\n    this.setState({readingText: newText});\r\n  }\r\n\r\n  getText = async () => {\r\n    const response = await fetch(\r\n      \"https://baconipsum.com/api/?type=all-meat&paras=3&start-with-lorem=1\"\r\n    );\r\n    const data = await response.json();  // TODO 1: please assign an array to this data varaible, so setReadingText() in the next line sets this.readingText to an array of strings. See below TODO\r\n    this.setReadingText(data);\r\n  };\r\n\r\n  render() {\r\n    const paragraphs = <p>{this.state.readingText}</p>;  // TODO 1: once this.state.readingText is an array of strings, uncomment the below code to replace this temp line\r\n    // const paragraphs = this.state.readingText.map((item, index) => {\r\n    //   return <p key={index}>{item}</p>;\r\n    // });\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"readingText\">{paragraphs}</div>\r\n        <NoteDisplayUI />\r\n        <AddReadingTextForm submitNewReadingText={this.setReadingText} />\r\n        <AddNoteForm />\r\n      </div>\r\n    );  \r\n  }\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}